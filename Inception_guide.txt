"i'm so glad they got rid of ft_services, how bad can the replacement project be?"
    - a fool

nkuipers presents: a guide for dummies to pass this terrible project

Inception is a project that requires you to use docker-compose to setup three
Docker containers, running self-built images with nginx, wordpress and mariadb,
and running all of this within a virtual machine.

I'm going to try to explain how to do this. Some stuff you read might be explained wrong
or incomplete or outdated, sorry for that, I understand it well enough to pass it and 
that's it. If you want more complete information, go read the Docker documentation instead.


 ~setting up Docker~
If you're of a newer cohort and have never had to do ft_server, you may be
unfamiliar with Docker. Make sure you have Docker installed via Managed
Software Center. Then open ~/.zshrc in a text editor and add the following lines
at the bottom:

rm -rf ~/Library/Containers/com.docker.docker
mkdir -p ~/goinfre/docker
ln -s ~/goinfre/docker ~/Library/Containers/com.docker.docker

This will make sure that docker will always, upon startup, place its containers
in goinfre and you won't get stuck with a full disk. If you end up with a full
disk anyway, you can add the following function to your ~/.zshrc:

#cleanup
function cleandisk(){
        echo -n \"Available before:\t\"; df -h | grep $HOME | sed 's/  */:/g' | cut -d ':' -f 4; unsetopt nomatch; rm -Rf ~/Library/*.42_cache_bak*; rm -Rf ~/*.42_cache_bak_*; setopt nomatch; echo -n \"Available after:\t\"; df -h | grep $HOME | sed 's/  */:/g' | cut -d ':' -f 4;
}

Typing cleandisk will now clean up your disk space. Finally, you can add the
function cleandocker to your ~/.zshrc:

#docker cleanup
function cleandocker() {
        docker stop $(docker ps -qa); docker rm $(docker ps -qa); docker rmi -f $(docker images -qa); docker volume rm $(docker volume ls -q); docker network rm $(docker network ls -q) 2> dev/null
}

The above line is mentioned at the start of the evaluation page and makes sure every
container, image, network, volume and other stuff you create in the project
is deleted. Useful if you want to ensure you want your images rebuilt between tests.

Part 1) Docker-compose

As I said before, Inception involves using one docker-compose.yml file to create three separate 
containers based on three images with a single command, plus two volumes and one network.
(The subject has a diagram, which is uncharacteristically helpful)

So what are these things again?

Docker containers are lightweight, self-contained computing environments that allow
you to run a service inside them.

A Docker image is a read-only template that contains a set of instructions for 
creating a container that can run on the Docker platform. It's where you specify
what you want to happen in one particular container.

Docker volumes are file systems mounted on Docker containers to preserve data 
generated by the running container. The volumes are stored on the host, independent 
of the container life cycle. This allows users to back up data and share file 
systems between containers easily.

A network serves to allow communication between containers. Docker has its own
network drivers that have predefined properties. For this project we only need 
the default network, which is a bridge network.

Check the status of the active versions you've made of the above by using 
'docker image/containers/network/volume ls'.

You can use docker-compose up to create the images if they don't already exist,
and then run the docker-compose.yml file to turn them into connected containers.
docker-compose down stops the containers, and the -v flag removes the volumes.
If you want to reboot the whole thing, docker-compose down -v and then remove
all of the images by using 'docker rmi $(docker image ls)'

Make sure you get the indentation in the docker-compose.yml file right, by the way.
You'll get some weird errors if you don't, and it may not always be apparent that
this is the problem.

By looking at my docker-compose.yml, you can find three different services defined 
with the following specifications:

    build: this tells Docker where to look for the Dockerfile that builds the
    image that runs in this container.

    container_name: container_name

    restart: if the container crashes, this option specifies what to do. set all 3
    of them to unless-stopped, as specified in the subject

    depends_on: you can use this to ensure one container is build before another. 
    since wordpress requires a database to store its content, I chose to have 
    wordpress depend on mariadb.

    networks: what network should the container be a part of. more on this later

    volumes: this is the most annoying part of the project. So a volume is a folder
    on your disk that you mount onto a folder on the container. it's similar to a 
    shared folder. the volumes line is split by colons:
     {PATH_TO_DISK_FOLDER}:{PATH_TO_CONTAINER_FOLDER}
    You can put a second colon at the end to specify permissions (:ro sets it to
    read-only, :rw to read and write, etc.), but this isn't necessary.
    The path to disk folder needs to be /Users/{login}/data. you can specify this
    in your .env file, just make sure your Makefile includes the .env file before
    making.

The docker-compose file also has a networks part where you declare the name of
your network. mine is called inception. make sure this name is the same as the 
one you specify under 'networks' at the containers part. nothing comes after 
the colon since we don't need any further options.

 ~volumes~
Finally, there's the volumes bit. According to the subject you need to have
two volumes, one for the database data and one for the wordpress and nginx files.

Now it's time for a little confession: these volumes don't work. They create a 
folder and the volume shows up, but they're not connected to anything. I wrote 
the volume path for mariadb as /var/db/mysql/ whereas it should be /var/lib/mysql/.
I did this wrong on purpose so they're not connected. There is no persistence upon reboot.

I tried to connect them, but it crashes the wordpress container. I don't know why, and 
neither did anyone I asked. Luckily, without persistence, you can still get 
90% on your evaluation at the time of writing, which allows you to pass the project. 
Sorry. If you want to get 100% on your evaluation you're reading the wrong guide.
Go read the documentation instead.

But do let me know what I did wrong if you find out, though.

Part 2) Creating your Docker images

The three services you need to set up all have their own needed config files, but the 
Dockerfiles aren't too dissimilar. Set up three folders, each with a Dockerfile in it.

Here's what you want to do in each Dockerfile:
1) set the correct linux distribution to base your Dockerfile on (debian:buster)
2) update & upgrade to latest
3) install the service(s) and additional programs you want on it with 'apt-get install (service)'
4) get the respective config files to the right location, (might need to overwrite existing ones)
5) install whatever else you may need for the image, either via a download or something included
    in the src folder
6) expose the port you need: 3306 for mariadb, 443 for nginx, and 9000 for wordpress
7) runtime begins, finish with the command you want to start running the service
    (php-fpm for wp/php-fpm, nginx for nginx, mysqld for mariadb)

If anything goes wrong with copying files to and from images within the Dockerfile,
they might end up in the wrong folder or whatever, here's a way to open bash within
your container so you can check out the file structure and investigate:

docker exec -it [container name or ID] bash

with the name or ID found using docker containers ls.

Also if there's ever anything wrong with your container you can use docker logs [ctr name]
to see what's going on in there.

Here are the most important config files for each service:
 - for mariadb you'll need to apply an sql file that sets up users. What's important
    is that this file changes access rights, so that you can only login as root into 
    mysql via password. make sure that the content of this file is read into the
    container with mysql / mariadb running, so that it sets the rights accordingly.

    To check if it worked, and you'll need to do this in the evaluation, enter
    the docker container with 'docker exec -it mariadb bash'. Start mysql
    with 'mysql', if you've done this correctly you'll be blocked access 
    without a password. start 'mysql -p' and enter your password from the sql file,
    and it should work.

- for wordpress it's wp-config.php, where you can set up the specifics of the database.
    you can easily get a template of this and no real need to adjust too much here.
    make sure to put it in the right place.

- for nginx it's the nginx conf file. Here you can specify what port it listens on
    (make sure that port 80 isn't set up as per the subject, we want https only).
    You'll need to specify an SSL protocol here and set up keys.
    Apart from that, the most important line in this file is the root line, which
    specifies which folder will be opened when you go to localhost in browser.
    As we want to open wordpress immediately upon startup, make sure that the path
    you write there is where you've installed wordpress.

Part 3) The Virtual Machine

Before bothering with the virtual machine I recommend getting everything else 
working like you want it on your main OS first.

 ~Setting up the VM~
To complete this project you need to run the final result on a VM. Install VirtualBox
via Managed Software Center and run it. Next, get a disk image. If you've done
Born2BeRoot, you probably know how this works, but you're going to need a new
image because we need one with a GUI that can open a web browser. I went with
an image of Arch Linux x64 with MATE desktop which I found on osboxes.org. 
Make sure you pick a version that's smaller than 2GB, make sureyou clean your 
disk so you have the space to download, and make sure to move it to goinfre 
immediately before unzipping it.
(if it's zipped with 7z you can unzip using command line commands)

Here's a link to where I got my image: https://www.osboxes.org/ubuntu-mate/

Create a new VM using your disk image.  You can select how much ram and CPU cores you 
want to split between MAC OS and the VM, best to pick at least 2 CPUs and 2 gb ram
so the VM isn't terribly slow. To give yourself a better view, you can up the resolution.

For this next bit I'm going to assume you used an image from the link above. Time to 
setup the VM for this project. Login using the password which is always 'osboxes.org'.

Now open MATE terminal from the menu->system tools, and use the command 'sudo su' to login to the 
root user that has more permissions, the password is once again 'osboxes.org'.
Make sure to login to root every time you use this!

Now install Docker on the VM: https://docs.docker.com/engine/install/ubuntu/

 ~Setting up shared folder~
I haven't been able to get a clipboard functioning. So copying or pasting shell
commands or lines of code or anything else doesn't work. And this is a problem, 
because we'll need to clone a Git repository for evaluation. Instead, I recommend
setting up a shared folder. First, create a regular folder on your normal desktop
called VM_folder. In VirtualBox, go to Settings->Shared folder and click add.
For folder path, pick VM_folder and set it to auto mount. Click OK.
In the terminal in the VM, create a folder called shared_folder. Now run the
following command: sudo mount -t vboxsf VM_folder shared_folder
Now you can just clone the eval repository to this folder and you can access
it immediately in the VM. No need to fuck around with SSH keys.

 ~creating the alias for localhost~
One of the project requirements is that {your login}.42.fr needs to redirect
to localhost. Open the file /etc/hosts in emacs/vim. The top lines should be this:

127.0.0.1   localhost
127.0.1.1   osboxes

Change this to:

127.0.0.1   localhost   {your login}.42.fr
127.0.1.1   osboxes

---------
This guide might not be a perfect source of information but it contains most of the
stuff I think you'll need to do and know to complete this. 
If you want to add or change stuff to it, feel free to do so.
Before turning in the project, be sure to check out the corrections page that's included,
although most of the specifics that it wants are addressed in the text above.
Good luck!